library(wordcloud)
library(tm)
library(SnowballC)
setwd("~/Desktop/MyProject/GoogleData/Searches")
setwd("~/Desktop/Linda's Projects/GoogleData/Searches")
json_files = list.files(pattern="*.json", full.names=T, recursive=FALSE)
original_data_obj = NULL
for (i in 1:15) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj$time_counts = lapply(original_data_obj$timestamp, function(row) {
length((row))
})
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
#######################################
# word cloud of search terms
#######################################
data_obj_wordcloud = data_obj[which(regexpr('(Current Location)', data_obj$query_text) == -1),]
data_obj_wordcloud = data_obj_wordcloud[which(regexpr(' -> ', data_obj_wordcloud$query_text) == -1),]
queryCorpusUnique = Corpus(VectorSource(unique(data_obj_wordcloud$query_text)))
queryCorpusUnique = tm_map(queryCorpusUnique, PlainTextDocument)
queryCorpusUnique = tm_map(queryCorpusUnique, removePunctuation)
queryCorpusUnique = tm_map(queryCorpusUnique, removeWords, stopwords('english'))
wordcloud(queryCorpusUnique, max.words = 100, random.order = FALSE)
#######################################
# average daily searches grouped by month
#######################################
#######################################
# average dow searches grouped by month
#######################################
library(jsonlite)
library(wordcloud)
library(tm)
library(SnowballC)
setwd("~/Desktop/MyProject/GoogleData/Searches")
json_files = list.files(pattern="*.json", full.names=T, recursive=FALSE)
original_data_obj = NULL
for (i in 1:15) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj$time_counts = lapply(original_data_obj$timestamp, function(row) {
length((row))
})
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
#######################################
# word cloud of search terms
#######################################
data_obj_wordcloud = data_obj[which(regexpr('(Current Location)', data_obj$query_text) == -1),]
data_obj_wordcloud = data_obj_wordcloud[which(regexpr(' -> ', data_obj_wordcloud$query_text) == -1),]
queryCorpusUnique = Corpus(VectorSource(unique(data_obj_wordcloud$query_text)))
queryCorpusUnique = tm_map(queryCorpusUnique, PlainTextDocument)
queryCorpusUnique = tm_map(queryCorpusUnique, removePunctuation)
queryCorpusUnique = tm_map(queryCorpusUnique, removeWords, stopwords('english'))
wordcloud(queryCorpusUnique, max.words = 100, random.order = FALSE)
#######################################
# average daily searches grouped by month
#######################################
#######################################
# average dow searches grouped by month
#######################################
#######################################
# Libraries
#######################################
library(jsonlite)
library(ggplot2)
library(ggmap)
library(geosphere)
library(lubridate)
library(lattice)
#######################################
# Set up env
#######################################
Sys.setenv(http_proxy="")
setwd("~/Desktop/MyProject/GoogleData/Location History")
max_dist_tresh = 100
#######################################
# Get and prepare data
#######################################
data = fromJSON("LocationHistory.json")
data_obj = data$locations
data_obj$timestamp = as.numeric(data_obj$timestampMs)/1000
data_obj$timestampMs = NULL
data_obj$lon = data_obj$longitudeE7/10000000
data_obj$longitudeE7 = NULL
data_obj$lat = data_obj$latitudeE7/10000000
data_obj$latitudeE7 = NULL
data_obj$activitys = NULL
# remove inaccurate data
data_obj = data_obj[which(data_obj$accuracy<=100), ]
data_obj = data_obj[which(data_obj$verticalAccuracy<=50), ]
# caculate distances and dates
shift.vec <- function(vec, shift){
if (length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec) - shift)]) }
else {
c(vec[(abs(shift) + 1):length(vec)], rep(NA, abs(shift)))
}
}
}
data_obj$lat_end <- shift.vec(data_obj$lat, -1)
data_obj$lon_end <- shift.vec(data_obj$lon, -1)
deg2rad = function(deg) {
rad =  as.numeric(deg) * (pi/180)
rad
}
calcDist = function(row) {
R = 6371 # Radius of the earth in km
dlat = deg2rad(as.numeric(row["lat_end"])-as.numeric(row["lat"]))
dlon = deg2rad(as.numeric(row["lon_end"])-as.numeric(row["lon"]))
a = sin(dlat/2) * sin(dlat/2) + cos(deg2rad(row["lat"])) * cos(deg2rad(row["lat_end"])) * sin(dlon/2) * sin(dlon/2)
c = 2 * atan2(as.numeric(sqrt(a)), as.numeric(sqrt(1-a)))
d = R * c # Distance in km
d / 1.6
}
data_obj$dist_to_prev = apply(data_obj, 1, FUN=calcDist)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
#######################################
# Location plotting
#######################################
# texas location plots
texas = get_map(location="texas", source="google", zoom=6, maptype = "terrain", color="color")
ggmap(texas) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
# houston location plots
houston = get_map(location="rice university", source="google", zoom=15, maptype = "terrain", color="color")
ggmap(houston) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
# dallas location plots
dallas = get_map(location="the colony,tx", source="google", zoom=10, maptype = "toner-lite", color="color")
ggmap(dallas) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
#######################################
# Velocity plot at locations in dallas
#######################################
data_obj = data_obj[which(!is.na(data_obj$velocity)), ]
data_obj = data_obj[which(data_obj$velocity <= 40), ]
ggmap(dallas) + geom_point(data=data_obj, aes(x=lon, y=lat, color=velocity), alpha=0.5) +
theme(legend.position="left") + scale_colour_gradient(limits=c(0, 40), low="blue", high="red")
#######################################
# Distance travelled per month
#######################################
dist_by_month = NULL
dist_by_month = aggregate(data_obj$dist_to_prev, by=list(yearmon = data_obj$yearmon), FUN = sum)
dist_by_month = dist_by_month[-1,]
barplot(dist_by_month$x, names.arg=dist_by_month$yearmon, xlab="Month", ylab="Miles Travelled",
main="Miles Travelled per Month", ylim=c(0,4000))
#######################################
# Distance travelled per month grouped by weekday
#######################################
dist_by_day = NULL
dist_by_day = aggregate(data_obj$dist_to_prev, by=list(date=data_obj$date), FUN = sum)
dist_by_day = na.omit(dist_by_day)
dist_by_day$dow = weekdays(dist_by_day$date)
dist_by_day$is_weekday = dist_by_day$dow
dist_by_day$is_weekday[dist_by_day$is_weekday == "Monday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Tuesday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Wednesday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Thursday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Friday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Saturday"] = "Weekend"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Sunday"] = "Weekend"
dist_by_day$yearmon = paste(year(dist_by_day$date), sprintf("%02d", month(dist_by_day$date)), sep="-")
dist_by_day = dist_by_day[which(dist_by_day$x < max_dist_tresh),]
dist_by_day = dist_by_day[-which(dist_by_day$yearmon=="2016-07"), ]
is_weekday_by_month_mean = aggregate(dist_by_day[c("x")], by=list(yearmon=dist_by_day$yearmon, is_weekday=dist_by_day$is_weekday), FUN=mean)
barchart(x ~ yearmon, groups=is_weekday, is_weekday_by_month_mean, horizontal = FALSE,
xlab="Month", ylab="Miles", ylim=c(0,80), main="Miles Travelled per Month",
auto.key=list(size = 1, columns = 2, text=c("Weekday", "Weekend"), cex.title=1, title=""))
boxplot(x ~ is_weekday, data=dist_by_day, main="Miles Travelled per Month", ylab="Miles")
boxplot(x ~ yearmon, data=dist_by_day, main="Miles Travelled per Month", ylab="Miles")
boxplot(x ~ dow, data=dist_by_day, main="Miles Travelled per DOW", ylab="Miles")
#######################################
# Distance travelled per month grouped by dow
#######################################
dist_by_day = NULL
dist_by_day = aggregate(data_obj$dist_to_prev, by=list(date=data_obj$date), FUN = sum)
dist_by_day = na.omit(dist_by_day)
dist_by_day$dow = weekdays(dist_by_day$date)
dist_by_day$yearmon = paste(year(dist_by_day$date), sprintf("%02d", month(dist_by_day$date)), sep="-")
dist_by_day = dist_by_day[which(dist_by_day$x < max_dist_tresh),]
dist_by_dow = aggregate(dist_by_day[c("x")], by=list(yearmon=dist_by_day$yearmon, dow=dist_by_day$dow), FUN=mean)
dist_by_dow = dist_by_dow[-which(dist_by_dow$yearmon=="2016-07"), ]
barchart(x ~ yearmon, groups=dow, dist_by_dow, horizontal = FALSE,
xlab="Month", ylab="Miles", ylim=c(0,110), main="Miles Travelled per Month",
auto.key=list(size = 1, columns = 7, text=c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"), cex.title=1, title=""))
setwd("~/Desktop/MyProject/GoogleData/Location History")
setwd("~/Desktop/Linda's Projects/GoogleData/Location History")
#######################################
# Libraries
#######################################
library(jsonlite)
library(ggplot2)
library(ggmap)
library(geosphere)
library(lubridate)
library(lattice)
#######################################
# Set up env
#######################################
Sys.setenv(http_proxy="")
setwd("~/Desktop/MyProject/GoogleData/Location History")
max_dist_tresh = 100
#######################################
# Get and prepare data
#######################################
data = fromJSON("LocationHistory.json")
data_obj = data$locations
data_obj$timestamp = as.numeric(data_obj$timestampMs)/1000
data_obj$timestampMs = NULL
data_obj$lon = data_obj$longitudeE7/10000000
data_obj$longitudeE7 = NULL
data_obj$lat = data_obj$latitudeE7/10000000
data_obj$latitudeE7 = NULL
data_obj$activitys = NULL
# remove inaccurate data
data_obj = data_obj[which(data_obj$accuracy<=100), ]
data_obj = data_obj[which(data_obj$verticalAccuracy<=50), ]
# caculate distances and dates
shift.vec <- function(vec, shift){
if (length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec) - shift)]) }
else {
c(vec[(abs(shift) + 1):length(vec)], rep(NA, abs(shift)))
}
}
}
data_obj$lat_end <- shift.vec(data_obj$lat, -1)
data_obj$lon_end <- shift.vec(data_obj$lon, -1)
deg2rad = function(deg) {
rad =  as.numeric(deg) * (pi/180)
rad
}
calcDist = function(row) {
R = 6371 # Radius of the earth in km
dlat = deg2rad(as.numeric(row["lat_end"])-as.numeric(row["lat"]))
dlon = deg2rad(as.numeric(row["lon_end"])-as.numeric(row["lon"]))
a = sin(dlat/2) * sin(dlat/2) + cos(deg2rad(row["lat"])) * cos(deg2rad(row["lat_end"])) * sin(dlon/2) * sin(dlon/2)
c = 2 * atan2(as.numeric(sqrt(a)), as.numeric(sqrt(1-a)))
d = R * c # Distance in km
d / 1.6
}
data_obj$dist_to_prev = apply(data_obj, 1, FUN=calcDist)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
#######################################
# Location plotting
#######################################
# texas location plots
texas = get_map(location="texas", source="google", zoom=6, maptype = "terrain", color="color")
ggmap(texas) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
# houston location plots
houston = get_map(location="rice university", source="google", zoom=15, maptype = "terrain", color="color")
ggmap(houston) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
# dallas location plots
dallas = get_map(location="the colony,tx", source="google", zoom=10, maptype = "toner-lite", color="color")
ggmap(dallas) + geom_point(data = data_obj, aes(x=lon, y=lat), alpha=0.5, color="red") +
theme(legend.position = "right") + labs(x = "Longitude", y = "Latitude")
#######################################
# Velocity plot at locations in dallas
#######################################
data_obj = data_obj[which(!is.na(data_obj$velocity)), ]
data_obj = data_obj[which(data_obj$velocity <= 40), ]
ggmap(dallas) + geom_point(data=data_obj, aes(x=lon, y=lat, color=velocity), alpha=0.5) +
theme(legend.position="left") + scale_colour_gradient(limits=c(0, 40), low="blue", high="red")
#######################################
# Distance travelled per month
#######################################
dist_by_month = NULL
dist_by_month = aggregate(data_obj$dist_to_prev, by=list(yearmon = data_obj$yearmon), FUN = sum)
dist_by_month = dist_by_month[-1,]
barplot(dist_by_month$x, names.arg=dist_by_month$yearmon, xlab="Month", ylab="Miles Travelled",
main="Miles Travelled per Month", ylim=c(0,4000))
#######################################
# Distance travelled per month grouped by weekday
#######################################
dist_by_day = NULL
dist_by_day = aggregate(data_obj$dist_to_prev, by=list(date=data_obj$date), FUN = sum)
dist_by_day = na.omit(dist_by_day)
dist_by_day$dow = weekdays(dist_by_day$date)
dist_by_day$is_weekday = dist_by_day$dow
dist_by_day$is_weekday[dist_by_day$is_weekday == "Monday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Tuesday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Wednesday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Thursday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Friday"] = "Weekday"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Saturday"] = "Weekend"
dist_by_day$is_weekday[dist_by_day$is_weekday == "Sunday"] = "Weekend"
dist_by_day$yearmon = paste(year(dist_by_day$date), sprintf("%02d", month(dist_by_day$date)), sep="-")
dist_by_day = dist_by_day[which(dist_by_day$x < max_dist_tresh),]
dist_by_day = dist_by_day[-which(dist_by_day$yearmon=="2016-07"), ]
is_weekday_by_month_mean = aggregate(dist_by_day[c("x")], by=list(yearmon=dist_by_day$yearmon, is_weekday=dist_by_day$is_weekday), FUN=mean)
barchart(x ~ yearmon, groups=is_weekday, is_weekday_by_month_mean, horizontal = FALSE,
xlab="Month", ylab="Miles", ylim=c(0,80), main="Miles Travelled per Month",
auto.key=list(size = 1, columns = 2, text=c("Weekday", "Weekend"), cex.title=1, title=""))
boxplot(x ~ is_weekday, data=dist_by_day, main="Miles Travelled per Month", ylab="Miles")
boxplot(x ~ yearmon, data=dist_by_day, main="Miles Travelled per Month", ylab="Miles")
boxplot(x ~ dow, data=dist_by_day, main="Miles Travelled per DOW", ylab="Miles")
#######################################
# Distance travelled per month grouped by dow
#######################################
dist_by_day = NULL
dist_by_day = aggregate(data_obj$dist_to_prev, by=list(date=data_obj$date), FUN = sum)
dist_by_day = na.omit(dist_by_day)
dist_by_day$dow = weekdays(dist_by_day$date)
dist_by_day$yearmon = paste(year(dist_by_day$date), sprintf("%02d", month(dist_by_day$date)), sep="-")
dist_by_day = dist_by_day[which(dist_by_day$x < max_dist_tresh),]
dist_by_dow = aggregate(dist_by_day[c("x")], by=list(yearmon=dist_by_day$yearmon, dow=dist_by_day$dow), FUN=mean)
dist_by_dow = dist_by_dow[-which(dist_by_dow$yearmon=="2016-07"), ]
barchart(x ~ yearmon, groups=dow, dist_by_dow, horizontal = FALSE,
xlab="Month", ylab="Miles", ylim=c(0,110), main="Miles Travelled per Month",
auto.key=list(size = 1, columns = 7, text=c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"), cex.title=1, title=""))
library('lattice')
library('ggplot2')
library('reshape2')
setwd("~/Desktop/Linda's Projects/AppStoreGames")
#######################################
# prepare and set up data
#######################################
data = read.csv("purchases.csv")
data$game = as.character(data$game)
data$date = as.Date(data$date, "%m/%d/%y")
data$yearmon = format(data$date, "%Y-%m")
data = data[order(data$date),]
data$year = year(data$date)
data$month = month(data$date)
data$quarter[data$month==1] = "Q1"
data$quarter[data$month==2] = "Q1"
data$quarter[data$month==3] = "Q1"
data$quarter[data$month==4] = "Q2"
data$quarter[data$month==5] = "Q2"
data$quarter[data$month==6] = "Q2"
data$quarter[data$month==7] = "Q3"
data$quarter[data$month==8] = "Q3"
data$quarter[data$month==9] = "Q3"
data$quarter[data$month==10] = "Q4"
data$quarter[data$month==11] = "Q4"
data$quarter[data$month==12] = "Q4"
data$yearQ = paste(data$year,data$quarter,sep="-")
#######################################
# mark low spending games as other
#######################################
aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
library('lattice')
library('ggplot2')
library('reshape2')
setwd("~/Desktop/Linda's Projects/AppStoreGames")
#######################################
# prepare and set up data
#######################################
data = read.csv("purchases.csv")
data$game = as.character(data$game)
data$date = as.Date(data$date, "%m/%d/%y")
data$yearmon = format(data$date, "%Y-%m")
data = data[order(data$date),]
data$year = year(data$date)
data$month = month(data$date)
data$quarter[data$month==1] = "Q1"
data$quarter[data$month==2] = "Q1"
data$quarter[data$month==3] = "Q1"
data$quarter[data$month==4] = "Q2"
data$quarter[data$month==5] = "Q2"
data$quarter[data$month==6] = "Q2"
data$quarter[data$month==7] = "Q3"
data$quarter[data$month==8] = "Q3"
data$quarter[data$month==9] = "Q3"
data$quarter[data$month==10] = "Q4"
data$quarter[data$month==11] = "Q4"
data$quarter[data$month==12] = "Q4"
data$yearQ = paste(data$year,data$quarter,sep="-")
#######################################
# mark low spending games as other
#######################################
aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
(data$game %in% top_spending_games)
data$game[!(data$game %in% top_spending_games)]
aggregated_game[data$game[!(data$game %in% top_spending_games)],]
View(aggregated_game)
aggregated_game[aggregated_game$price < 50]
aggregated_game[aggregated_game$price < 50,]
others = aggregated_game[aggregated_game$price < 50,]
View(others)
library(lubridate)
library(reshape)
library(zoo)
library(ggplot2)
setwd("~/Desktop/MyProject/Banking")
data = read.csv("data.csv")
data$balance = as.numeric(gsub(',', '', as.character(data$balance)))
data$date = as.Date(data$date, "%m/%d/%y")
data = data[order(data$date),]
data$date = format(data$date, "%Y-%m")
dataLong = data
data = reshape(data, timevar='account', idvar='date', direction='wide')
rownames(data) = data$date
colnames(data) = c("date", "BOA_Checkings", "BOA_Savings", "BOA_IRA", "C1_Savings", "Fed_401k")
data$BOA_IRA[1] = 0
data$BOA_IRA = na.locf(data$BOA_IRA)
data$C1_Savings[1] = 0
data$C1_Savings = na.locf(data$C1_Savings)
data$Fed_401k[1] = 0
data$Fed_401k = na.locf(data$Fed_401k)
dataSubset = t(subset(data, select=-c(date)))
labels = c("BOA_Checkings", "BOA_Savings", "BOA_IRA", "C1_Savings", "401k")
colors = c('red', 'yellow', 'purple', 'cyan', 'green')
barplot(as.matrix(dataSubset), col = colors, xlab="Date", ylab="Balance", main = "Bank Accounts Over Time")
legend("topleft", labels, cex = 1, fill = colors, bty = "n")
myplot = ggplot(dataLong, aes(x = as.factor(date), y = balance, fill = account)) + geom_area(position = 'stack') + ylim(0,17000)
print(myplot)
gg <- ggplot(dataLong, aes(x=date, y=balance))
gg <- gg + geom_area(aes(colour=account, fill=account))
gg <- gg + scale_x_discrete(labels=levels(dataLong$date))
gg
setwd("~/Desktop/MyProject/Banking")
setwd("~/Desktop/Linda's Projects/Banking")
data = read.csv("data.csv")
data$balance = as.numeric(gsub(',', '', as.character(data$balance)))
data$date = as.Date(data$date, "%m/%d/%y")
data = data[order(data$date),]
data$date = format(data$date, "%Y-%m")
dataLong = data
data = reshape(data, timevar='account', idvar='date', direction='wide')
rownames(data) = data$date
colnames(data) = c("date", "BOA_Checkings", "BOA_Savings", "BOA_IRA", "C1_Savings", "Fed_401k")
data$BOA_IRA[1] = 0
data$BOA_IRA = na.locf(data$BOA_IRA)
data$C1_Savings[1] = 0
data$C1_Savings = na.locf(data$C1_Savings)
data$Fed_401k[1] = 0
data$Fed_401k = na.locf(data$Fed_401k)
dataSubset = t(subset(data, select=-c(date)))
labels = c("BOA_Checkings", "BOA_Savings", "BOA_IRA", "C1_Savings", "401k")
colors = c('red', 'yellow', 'purple', 'cyan', 'green')
barplot(as.matrix(dataSubset), col = colors, xlab="Date", ylab="Balance", main = "Bank Accounts Over Time")
legend("topleft", labels, cex = 1, fill = colors, bty = "n")
myplot = ggplot(dataLong, aes(x = as.factor(date), y = balance, fill = account)) + geom_area(position = 'stack') + ylim(0,17000)
print(myplot)
gg <- ggplot(dataLong, aes(x=date, y=balance))
gg <- gg + geom_area(aes(colour=account, fill=account))
gg <- gg + scale_x_discrete(labels=levels(dataLong$date))
gg
myplot = ggplot(dataLong, aes(x = as.factor(date), y = balance, fill = account)) + geom_area(position = 'stack') + ylim(0,17000)
print(myplot)
myplot = ggplot(dataLong, aes(x = as.factor(date), y = balance, fill = account)) + geom_area(position = 'stack') + ylim(0,60000)
print(myplot)
gg <- ggplot(dataLong, aes(x=date, y=balance))
gg <- gg + geom_area(aes(colour=account, fill=account))
gg <- gg + scale_x_discrete(labels=levels(dataLong$date))
gg
dataSubset = t(subset(data, select=-c(date)))
labels = c("BOA_Checkings", "BOA_Savings", "BOA_IRA", "C1_Savings", "401k")
colors = c('red', 'yellow', 'purple', 'cyan', 'green')
barplot(as.matrix(dataSubset), col = colors, xlab="Date", ylab="Balance", main = "Bank Accounts Over Time", ylim=c(0,60000))
legend("topleft", labels, cex = 1, fill = colors, bty = "n")
